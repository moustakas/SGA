#!/usr/bin/env python

"""Build a full-sky Gaia catalog.

Code is mostly based on code written by Dustin Lang:
  https://github.com/legacysurvey/legacypipe/blob/main/py/legacyanalysis/gaia-masks.py
  https://github.com/legacysurvey/legacypipe/blob/main/py/legacyanalysis/gaia-star-mask-fix.ipynb

"""
import os, pdb
import numpy as np
import matplotlib.pyplot as plt

from astrometry.util.fits import merge_tables, fits_table
from astrometry.util.multiproc import multiproc

from legacypipe.survey import wcs_for_brick
from legacypipe.reference import get_reference_sources
from legacypipe.survey import LegacySurveyData
from legacypipe.format_catalog import get_units_for_columns

def bounce_one_brick(X):
    return one_brick(*X)


def one_brick(brick, survey):
    wcs = wcs_for_brick(brick)
    # gaia_margin: don't retrieve sources outside the brick (we'll get them
    # in the neighbouring brick!)
    G, _ = get_reference_sources(survey, wcs, 0.262, None,
                                 tycho_stars=True, gaia_stars=True,
                                 star_clusters=False, large_galaxies=False,
                                 gaia_margin=0.)
    G.cut((G.ra  >= brick.ra1 ) * (G.ra  < brick.ra2) *
          (G.dec >= brick.dec1) * (G.dec < brick.dec2))
    I = np.flatnonzero(np.logical_or(G.isbright, G.ismedium))
    #print('%i of %i: Brick' % (i+1, len(BG)), brick.brickname, len(G), len(I))
    #print('Brick', brick.brickname, len(G), len(I))
    if len(I) == 0:
        return None
    G.cut(I)
    G.brickname = np.array([brick.brickname] * len(G))
    return G


def main():
    #from astrometry.util.util import radecdegtohealpix, healpix_xy_to_ring
    # healpixes = set()
    # nside = 32
    # for r,d in zip(BG.ra,BG.dec):
    #     hpxy = radecdegtohealpix(r, d, nside)
    #     hpring = healpix_xy_to_ring(hpxy, nside)
    #     healpixes.add(hpring)
    # hr,hd = [],[]
    # for hp in healpixes:
    #     hp = healpix_ring_to_xy(hp, nside)
    #     r,d = healpix_to_radecdeg(hp, nside, 0.5, 0.5)
    #     hr.append(r)
    #     hd.append(d)
    # plt.plot(hr, hd, 'b.', alpha=0.1);

    outdir = os.path.join(os.environ['SCRATCH'], 'gaia')
    if not os.path.isdir(outdir):
        os.makedirs(outdir)

    B = fits_table('/global/cfs/cdirs/cosmo/data/legacysurvey/dr9/survey-bricks.fits.gz')
    #B.ll, B.bb = radectolb(B.ra, B.dec)
    #I = np.flatnonzero(np.abs(B.bb) > 10)
    #B[I].writeto('bricks-for-gaia.fits')
    #BG = B[I]
    BG = B
    BG = BG[np.argsort(-BG.dec)]

    survey = LegacySurveyData('/global/cfs/cdirs/cosmo/work/legacysurvey/dr10')

    #BG = BG[:10]
    #GG = []
    #for i,brick in enumerate(BG):
    #    G = one_brick(brick, survey)
    #    GG.append(G)

    if True:
        mp = multiproc(16)
        GG = []
        iset = 0
        while len(BG):
            print(f'Set {iset:03d}')
            N = 10000
            outfn = os.path.join(outdir, f'gaia-mask-set{iset:03d}.fits')
            if os.path.exists(outfn):
                Gset = fits_table(outfn)
                print(f'Read {outfn}')
                nb = len(set(Gset.brickname))
                if nb != N:
                    print(f'Warning: file contains {nb} bricks vs {N}')
            else:
                Gset = mp.map(bounce_one_brick, [(brick, survey) for brick in BG[:N]])
                Gset = [G for G in Gset if G is not None]
                Gset = merge_tables(Gset, columns='fillzero')
                Gset.writeto(outfn)#, clobber=True)
            GG.append(Gset)
            iset += 1
            BG = BG[N:]

    G = merge_tables(GG, columns='fillzero')

    # build the data model
    gaiacols = ['phot_g_mean_mag', 'phot_g_mean_flux_over_error', 'phot_g_n_obs', 'phot_bp_mean_mag', 'phot_bp_mean_flux_over_error',
                #'phot_bp_n_obs',
                'phot_rp_mean_mag', 'phot_rp_mean_flux_over_error',
                #'phot_rp_n_obs',
                #'phot_variable_flag',
                'astrometric_excess_noise', 'astrometric_excess_noise_sig',
                #'astrometric_n_obs_al', 'astrometric_n_good_obs_al',
                #'astrometric_weight_al',
                'duplicated_source',
                #'a_g_val', 'e_bp_min_rp_val',
                'phot_bp_rp_excess_factor',
                'astrometric_sigma5d_max', 'astrometric_params_solved',
                'ipd_frac_multi_peak', 'ipd_gof_harmonic_amplitude', 'ruwe']
    for c in gaiacols:
        # HACK
        if 'gaia_'+c in G.get_columns():
            print('skip', c)
            continue
        G.rename(c, 'gaia_'+c)

    # Column ordering
    cols = ('ra dec ref_cat ref_id ref_epoch mag mask_mag radius radius_pix '
            + 'pmra pmdec parallax ra_ivar dec_ivar pmra_ivar pmdec_ivar parallax_ivar '
            + 'istycho isgaia isbright ismedium pointsource donotfit '
            + 'decam_mag_g decam_mag_r decam_mag_i decam_mag_z zguess '
            + 'brickname ibx iby').split()
    cols += ['gaia_'+c for c in gaiacols]

    units = get_units_for_columns(cols, '', extras=dict(radius='deg'))

    fig, ax = plt.subplots()
    ax.hexbin(G.ra, G.dec, bins='log')
    fig.tight_layout()
    fig.savefig('ioannis/tmp/junk.png')

    outfn = os.path.join(outdir, 'gaia-mask.fits')
    if os.path.isfile(outfn):
        os.remove(outfn)
    G.writeto(outfn, columns=cols, units=units)


    pdb.set_trace()

if __name__ == '__main__':
    main()
