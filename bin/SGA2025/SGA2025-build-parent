#!/usr/bin/env python

"""Code to build the parent SGA2025 sample based on a combination of
internal and external catalogs.

salloc -N 1 -C cpu -A m3592 -t 04:00:00 --qos interactive
SGA2025-shifter
source /global/homes/i/ioannis/code/SGA/bin/SGA2025/SGA2025-env

SGA2025-build-parent --nocuts [--overwrite]
SGA2025-build-parent --vicuts [--overwrite]
SGA2025-build-parent --archive [--overwrite]
SGA2025-build-parent --in-footprint --region=dr9-north
SGA2025-build-parent --in-footprint --region=dr11-south
SGA2025-build-parent --parent --mp=32 [--reset-sgaid] [--overwrite]
SGA2025-build-parent --qa-parent

salloc -N 2 -C cpu -A m3592 -t 04:00:00 --qos interactive --image=docker:legacysurvey/sga:0.3
srun --ntasks=64 shifter --env-file=$CFS/desicollab/users/ioannis/SGA/2025/scripts/SGA2025-shifter-env.sh \
  SGA2025-build-parent --in-footprint --region=dr11-south

"""
def main():
    """Main wrapper.

    """
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('--mp', default=1, type=int, help='number of multiprocessing processes per MPI rank.')
    parser.add_argument('--ntest', type=int, default=None, help='Number of ' + \
                        'test objects to read (only with --in-footprint.')
    parser.add_argument('--region', default='dr9-north', type=str,
                        choices=['dr9-north', 'dr9-south', 'dr10-south', 'dr11-south'],
                        help='Region to pass to --in-footprint.')

    parser.add_argument('--nocuts', action='store_true',
                        help='Merge the catalogs retrieved by SGA2025-query-ned ' + \
                        'into the parent-nocuts catalog.')
    parser.add_argument('--vicuts', action='store_true',
                        help='Apply VI results to the parent-nocuts catalog.')
    parser.add_argument('--archive', action='store_true',
                        help='Apply ssl and other cuts but maintain "archive" ' + \
                        'object names and data model.')
    parser.add_argument('--parent', action='store_true',
                        help='Generate the final parent catalog ' + \
                        'with the final data model.')
    parser.add_argument('--in-footprint', action='store_true',
                        help='Match the various external catalogs ' + \
                        'to the CCDs files.')

    parser.add_argument('--qa-footprint', action='store_true',
                        help='Build QA of the in-footprint samples.')
    parser.add_argument('--qa-parent', action='store_true',
                        help='Build QA of the parent sample.')

    parser.add_argument('--verbose', action='store_true',
                        help='Be verbose.')
    parser.add_argument('--overwrite', action='store_true',
                        help='Overwrite existing files.')
    args = parser.parse_args()

    if args.nocuts:
        from SGA.parent import build_parent_nocuts
        build_parent_nocuts(overwrite=args.overwrite, verbose=args.verbose)

    if args.vicuts:
        from SGA.parent import build_parent_vicuts
        build_parent_vicuts(overwrite=args.overwrite, verbose=args.verbose)

    if args.archive:
        from SGA.parent import build_parent_archive
        build_parent_archive(overwrite=args.overwrite, verbose=args.verbose)

    if args.in_footprint:
        from SGA.parent import in_footprint
        from mpi4py import MPI
        from mpi4py.util import pkl5

        comm = pkl5.Intracomm(MPI.COMM_WORLD)
        in_footprint(region=args.region, comm=comm, ntest=args.ntest)

    if args.parent:
        from SGA.parent import build_parent
        build_parent(mp=args.mp, overwrite=args.overwrite, verbose=args.verbose)

    if args.qa_footprint:
        from SGA.parent import qa_footprint
        qa_footprint(region=args.region)

    if args.qa_parent:
        from SGA.parent import qa_parent
        qa_parent(nocuts=False, size_mag=True, sky=True)


if __name__ == '__main__':
    main()
