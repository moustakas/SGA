#!/usr/bin/env python

"""QA of Tractor modeling results.

NB: This diagnostic routine should be used for a relatively small
number of objects (~hundreds).


salloc -N 1 -C cpu -A m3592 -t 04:00:00 --qos interactive
SGA2025-shifter
source /global/homes/i/ioannis/code/SGA/bin/SGA2025/SGA2025-env

SGA2025-tractor-qa --datadir=/pscratch/sd/i/ioannis/SGA2025-v0.10 --last=10
SGA2025-tractor-qa --datadir=/pscratch/sd/i/ioannis/SGA2025-lvd --lvd
SGA2025-tractor-qa --datadir=/pscratch/sd/i/ioannis/SGA2025-lvd --lvd-ignore
SGA2025-tractor-qa --datadir=/pscratch/sd/i/ioannis/SGA2025-lvd --lvd-forcepsf

"""

import pdb # for debugging

import os
from glob import glob
import numpy as np
from astropy.table import Table, vstack
import fitsio

import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import matplotlib.gridspec as gridspec
from matplotlib.image import imread

from SGA.SGA import (sga_dir, sga_data_dir, get_galaxy_galaxydir,
                     read_sample, DIAMCOLUMN, REFIDCOLUMN, SAMPLE,
                     REFCAT)
from SGA.ellipse import ELLIPSEMODE
from SGA.io import get_raslice
from SGA.geometry import get_tractor_ellipse
from SGA.qa import overplot_ellipse
from SGA.logger import log

MAXDIAM = 3. # [arcmin]


def read_coadds(galaxy, galaxydir, refid, ra=None, dec=None, diam=None,
                cutout_galaxy=None, cutout_galaxydir=None, cutout=False):

    from astropy.wcs import WCS

    if cutout:
        from SGA.sky import simple_wcs
        from SGA.cutouts import get_pixscale_and_width

        pixscale, width = get_pixscale_and_width(
            np.atleast_1d(diam), maxdiam_arcmin=MAXDIAM)
        wcs = simple_wcs(ra, dec, width[0], pixscale[0])

        # strip the galaxy subdirectory
        imagefile = os.path.join(os.path.dirname(cutout_galaxydir), f'{cutout_galaxy}.jpeg')
        if not os.path.isfile(imagefile):
            msg = f'Cutout for {cutout_galaxydir} not found'
            log.warning(msg)
            raise ValueError(msg)
        image = imread(imagefile)
        assert(image.shape[0] == width[0])

        # if this object had GROUP_PRIMARY=False then there's also a
        # Tractor catalog
        if os.path.isdir(galaxydir):
        #if cutout_galaxy == 'SGA2025_J0150.925+068.693':
            raise ValueError('WRITE ME!!')

        return Table(), Table(), image, wcs


    imagefile = os.path.join(galaxydir, f'{galaxy}-image.jpg')
    #imagefile = os.path.join(galaxydir, f'{galaxy}-model.jpg')
    #imagefile = os.path.join(galaxydir, f'{galaxy}-resid.jpg')
    tractorfile = os.path.join(galaxydir, f'{galaxy}-tractor.fits')
    if not os.path.isfile(tractorfile):
        log.warning(f'Missing {tractorfile}')
        return Table(), Table(), None, None

    cols = np.array(['bx', 'by', 'ra', 'dec', 'type', 'sersic', 'shape_r',
                     'shape_e1', 'shape_e2', 'ref_cat', 'ref_id', 'flux_g',
                     'flux_r', 'flux_i', 'flux_z'])
    #allcols = np.array(fitsio.FITS(tractorfile)[1].get_colnames())
    #cols = cols[np.isin(cols, allcols)]
    #print(galaxydir)
    tractor = Table(fitsio.read(tractorfile, columns=cols))

    I = (np.logical_or(tractor['ref_cat'] == 'LG', tractor['ref_cat'] == REFCAT) * \
         (tractor['ref_id'] == refid))
    if np.sum(I) == 0:
        sga = Table()
    else:
        sga = tractor[I]
        #tractor = tractor[~I]

    if os.path.isfile(imagefile):
        image = imread(imagefile)

    for band in ['g', 'r', 'i', 'z']:
        fitsfile = os.path.join(galaxydir, f'{galaxy}-image-{band}.fits.fz')
        if os.path.isfile(fitsfile):
            hdr = fitsio.read_header(fitsfile, ext=1)
            wcs = WCS(hdr, naxis=2)
            break

    return sga, tractor, image, wcs


def annotated(sample, fullsample, pdffile, ncol=4, nrow=4, inches_per_panel=4.,
              datadir=None, cutoutdir=None, region='dr11-south', no_groups=False):

    from astropy.wcs.utils import proj_plane_pixel_scales as get_pixscale

    if no_groups:
        showsample = sample
    else:
        # each group member gets its own panel
        showsample = fullsample

    galaxy, galaxydir = get_galaxy_galaxydir(showsample, region=region,
                                             group=not no_groups,
                                             datadir=datadir)
    I = showsample['CUTOUT'].value
    if np.any(I):
        cutout_galaxy = np.copy(galaxy)
        cutout_galaxydir = np.copy(galaxydir)
        cgalaxy, cgalaxydir = get_galaxy_galaxydir(showsample[I], region=region,
                                                   group=not no_groups,
                                                   datadir=cutoutdir)
        cutout_galaxy[I] = cgalaxy
        cutout_galaxydir[I] = cgalaxydir
    else:
        cutout_galaxy = [None] * len(showsample)
        cutout_galaxydir = [None] * len(showsample)

    galaxy = np.atleast_1d(galaxy)
    galaxydir = np.atleast_1d(galaxydir)

    nobj = len(showsample)
    allindx = np.arange(nobj)

    nperpage = ncol * nrow
    npage = int(np.ceil(nobj / nperpage))

    pdf = PdfPages(pdffile)
    for ipage in range(npage):
        log.info(f'Building page {ipage+1:,d}/{npage:,d}')
        indx = allindx[ipage*nperpage:(ipage+1)*nperpage]

        fig, ax = plt.subplots(nrow, ncol,
                               figsize=(inches_per_panel*ncol,
                                        inches_per_panel*nrow),
                               gridspec_kw={'wspace': 0.02, 'hspace': 0.02},
                               constrained_layout=True)
        ax = ax.ravel()

        for iax, xx in enumerate(ax):
            if iax < len(indx):
                obj = showsample[indx[iax]]
                #print(obj['OBJNAME'])
                diam0, ba0, pa0 = obj['DIAM']*60., obj['BA'], obj['PA']
                geo0 = f'D(25)={diam0:.1f}" b/a={ba0:.2f} PA={pa0:.1f}'

                txt_ul = '\n'.join([obj["OBJNAME"], #obj["SGANAME"],
                                    r'$(\alpha,\delta)$='+f'({obj["RA"]:.7f},{obj["DEC"]:.6f})',
                                    geo0])
                xx.text(0.03, 0.97, txt_ul, transform=xx.transAxes, ha='left',
                        va='top', color='white', linespacing=1.5, fontsize=9,
                        bbox=dict(boxstyle='round', facecolor='k', alpha=0.5))

                if obj['CUTOUT'] or no_groups:
                    diam = obj['DIAM'] * 60., # [arcsec]
                    ra = obj['RA']
                    dec = obj['DEC']
                else:
                    diam = obj['GROUP_DIAMETER'] * 60., # [arcsec]
                    ra = obj['GROUP_RA']
                    dec = obj['GROUP_DEC']
                sga, tractor, image, wcs = read_coadds(
                    galaxy[indx[iax]], galaxydir[indx[iax]],
                    refid=obj[REFIDCOLUMN], ra=ra, dec=dec, diam=diam,
                    cutout_galaxy=cutout_galaxy[indx[iax]],
                    cutout_galaxydir=cutout_galaxydir[indx[iax]],
                    cutout=obj['CUTOUT'])

                if image is None:
                    txt_ll = 'No Tractor catalog'
                    txt_ur = None
                else:
                    height, width, _ = image.shape
                    pixscale = get_pixscale(wcs)[0] * 3600. # [arcsec/pixel]

                    xx.set_xlim(0, width)
                    xx.set_ylim(0, height)

                    xx.imshow(image, origin='lower', interpolation='none')
                    xx.invert_yaxis() # JPEG is flipped relative to FITS
                    for spine in ['bottom', 'top', 'right', 'left']:
                        xx.spines[spine].set_color('white')

                    if len(tractor) > 0:
                        I = ((tractor['type'] != 'PSF') * (tractor['type'] != 'DUP') *
                             (tractor['shape_r'] > 0.5))
                        #I = tractor['shape_r'] >= 0.
                        #I = tractor['shape_r'] > 1.
                        if np.sum(I) > 0 and False:
                            if np.sum(I) > 50:
                                alpha = 0.5
                            else:
                                alpha = 0.9
                            xx.scatter(tractor['bx'][I], height-tractor['by'][I],
                                       marker='x', s=10, color='red', alpha=alpha)

                        J = np.logical_or(tractor['type'] == 'PSF', tractor['type'] == 'DUP')
                        #print(galaxy[indx[iax]], np.sum(J))
                        if np.sum(J) > 0 and False:
                            if np.sum(J) > 50:
                                s = 1
                                alpha = 0.5
                            else:
                                s = 10
                                alpha = 0.9
                            xx.scatter(tractor['bx'][J], height-tractor['by'][J],
                                       marker='o', s=s, color='white', alpha=alpha)

                    if len(sga) > 0:
                        from SGA.geometry import get_tractor_ellipse
                        _, ba, pa = get_tractor_ellipse(sga['shape_r'][0], sga['shape_e1'][0], sga['shape_e2'][0])
                        print(f"{obj['OBJNAME']:20} {diam0:05.0f} arcsec   {obj['RA']:.7f} {obj['DEC']:.7f} " + \
                              f"{sga['ra'][0]:.7f} {sga['dec'][0]:.7f} {ba:.3f} {pa:.1f}")
                        xx.scatter(sga['bx'], height-sga['by'], marker='s',
                                   facecolor='none', s=40, color='cyan')
                    else:
                        print(f"{obj['OBJNAME']:20} {diam0:05.0f} arcsec   {obj['RA']:.7f} {obj['DEC']:.7f}")

                    # draw the initial ellipse geometry...
                    (xpix, ypix) = wcs.wcs_world2pix(obj['RA'], obj['DEC'], 0)
                    overplot_ellipse(diam0, ba0, pa0, xpix, ypix,
                                     height_pixels=width, pixscale=pixscale,
                                     ax=xx, color='white', linestyle='-',
                                     draw_majorminor_axes=True, jpeg=True)

                    if len(sga) > 0:
                        typ, nn = sga['type'][0], sga['sersic'][0]
                        ra, dec = sga['ra'][0], sga['dec'][0]
                        r50 = sga['shape_r'][0]
                        e1, e2 = sga['shape_e1'][0], sga['shape_e2'][0]
                        diam, ba, pa = get_tractor_ellipse(r50, e1, e2)

                        mag = []
                        for band in ['g', 'r', 'i', 'z']:
                            if f'flux_{band}' in sga.colnames:
                                flux = sga[f'flux_{band}'][0]
                                if flux > 0.:
                                    mag.append(f'{band}={22.5-2.5*np.log10(flux):.2f}')
                        mag = ' '.join(mag)

                        if typ == 'PSF':
                            pass
                        elif typ == 'REX':
                            geo = f'r(50)={r50:.1f}"'
                        elif typ == 'SER':
                            typ = f'{typ} (n={nn:.1f})'
                            geo = f'r(50)={r50:.1f}" b/a={ba:.2f} PA={pa:.1f}'
                        else:
                            geo = f'r(50)={r50:.1f}" b/a={ba:.2f} PA={pa:.1f}'

                        txt_ur = f'{typ}'
                        if typ == 'PSF':
                            txt_ll = '\n'.join([r'$(\alpha,\delta)$='+f'({ra:.7f},{dec:.6f})', mag])
                        else:
                            txt_ll = '\n'.join([geo, r'$(\alpha,\delta)$='+f'({ra:.7f},{dec:.6f})', mag])
                    else:
                        if len(tractor) > 0:
                            txt_ur = None
                            txt_ll = 'SGA source dropped'
                        else:
                            txt_ur = None
                            txt_ll = 'Missing Tractor catalog'

                # label the other objects in the group
                if no_groups:
                    for otherobj in fullsample:
                        if otherobj[REFIDCOLUMN] == obj[REFIDCOLUMN]:
                            continue
                        (xpix, ypix) = wcs.wcs_world2pix(otherobj['RA'], otherobj['DEC'], 0)
                        diam0, ba0, pa0 = otherobj['DIAM']*60., otherobj['BA'], otherobj['PA']
                        overplot_ellipse(diam0, ba0, pa0, xpix, ypix,
                                         height_pixels=width, pixscale=pixscale,
                                         ax=xx, color='white', linestyle='-',
                                         draw_majorminor_axes=False, jpeg=True)

                xx.margins(0)
                xx.set_xticks([])
                xx.set_yticks([])

                if txt_ll:
                    xx.text(0.03, 0.03, txt_ll, transform=xx.transAxes,
                            ha='left', va='bottom', color='white',
                            linespacing=1.5, fontsize=9,
                            bbox=dict(boxstyle='round', facecolor='k', alpha=0.5))

                if txt_ur:
                    xx.text(0.97, 0.97, txt_ur, transform=xx.transAxes,
                            ha='right', va='top', color='white',
                            linespacing=1.5, fontsize=9,
                            bbox=dict(boxstyle='round', facecolor='k', alpha=0.5))

                if len(sga) > 0:
                    # ...and the Tractor model
                    (xpix, ypix) = wcs.wcs_world2pix(sga['ra'], sga['dec'], 0)
                    overplot_ellipse(2.*r50, ba, pa, xpix, ypix,
                                     height_pixels=height, pixscale=pixscale,
                                     ax=xx, color='yellow', linestyle='--',
                                     draw_majorminor_axes=True, jpeg=True)

            else:
                xx.axis('off')
        pdf.savefig(fig, bbox_inches='tight')#, dpi=150, pad_inches=0)
        plt.close()

    pdf.close()
    log.info(f'Wrote {pdffile}')


def qa_tractor(region='dr11-south', first=None, last=None, galaxylist=None, mp=1,
               datadir=None, lvd_resolved=False, lvd_fixgeo=False, lvd_forcepsf=False,
               lvd=False, no_groups=False, mindiam=0., maxdiam=200.):

    if datadir is None:
        datadir = sga_data_dir()
    cutoutdir = os.path.join(datadir, 'cutouts')

    any_lvd = lvd or lvd_resolved or lvd_fixgeo or lvd_forcepsf
    if any_lvd:
        no_groups = True

    sample, fullsample = read_sample(region=region, lvd=any_lvd,
                                     first=first, last=last,
                                     galaxylist=galaxylist,
                                     no_groups=no_groups,
                                     mindiam=mindiam, maxdiam=maxdiam)

    if any_lvd:
        from SGA.SGA import SAMPLE
        from SGA.coadds import REGIONBITS

        qadir = os.path.join(sga_dir(), 'parent', 'lvd')

        # not all LVD are primary, so re-select them here
        sample = fullsample[(fullsample['SAMPLE'] & SAMPLE['LVD'] != 0) *
                            (fullsample['REGION'] & REGIONBITS[region] != 0)]

        if lvd:
            I = sample['ELLIPSEMODE'] == 0
            #gals = ['AGC749235', 'ESO 006-001', 'HIPASS J1131-31', 'LV J1243+4127', 'N1291-DW8',
            #        'NGC 2903-HI-1', 'dw1343+58', 'KV19-212', 'KV19-329', 'KV19-442', 'SUCD1',
            #        'dw1110+0037', 'dw1119p1419']
            #I = np.isin(sample['OBJNAME'], gals)
            suffix = ''
        elif lvd_resolved:
            I = sample['ELLIPSEMODE'] & ELLIPSEMODE['RESOLVED'] != 0
            suffix = '-resolved'
        elif lvd_fixgeo:
            # don't double-count / show the RESOLVED sources
            I = ((sample['ELLIPSEMODE'] & ELLIPSEMODE['FIXGEO'] != 0) *
                 (sample['ELLIPSEMODE'] & ELLIPSEMODE['RESOLVED'] == 0))
            suffix = '-fixgeo'
        elif lvd_forcepsf:
            I = sample['ELLIPSEMODE'] & ELLIPSEMODE['FORCEPSF'] != 0
            suffix = '-forcepsf'
        sample = sample[I]

        # for the various LVD samples, do not include group members
        print('FIXME -- groups have been split up correctly now')
        pdffile = os.path.join(qadir, f'qa-tractor-{region}-lvd{suffix}.pdf')
        fullsample = sample
        diamcolumn = 'DIAM'
    else:
        qadir = os.path.join(sga_dir(), 'parent', 'qa')
        if no_groups:
            suffix = '-no-groups'
        else:
            suffix = ''
        pdffile = os.path.join(qadir, f'qa-tractor-{region}-sample{suffix}.pdf')

        #print('Hack!')
        ##I = sample['SAMPLE'] == 0
        #srt = np.argsort(sample['GROUP_MULT'])[::-1]
        #sample = sample[srt]
        #I = (sample['SAMPLE'] == 0) * (sample['GROUP_MULT'] > 50)

        #I = np.isin(sample['OBJNAME'], ['KUG 1247+260', 'III Zw 040 NOTES02', 'dw1227p0136', 'UGC 05688'])
        #I = np.isin(sample['SGANAME'], ['SGA2025_J0150.168+068.660'])
        #sample = sample[I]

        # We still want to see and label nearby companions in
        # 'fullsample', i.e., without any diameter cuts.
        if no_groups:
            diamcolumn = 'DIAM'
            _, fullsample = read_sample(region=region)
        else:
            diamcolumn = DIAMCOLUMN

        fullsample = fullsample[np.isin(fullsample['GROUP_ID'], sample['GROUP_ID'])]

        #from collections import Counter
        #C = Counter(fullsample['GROUP_ID'])
        #C.most_common()
        #for key in C.keys():
        #    print(key, C[key], np.sum(fullsample['GROUP_ID'] == key))

    if not os.path.isdir(qadir):
        os.makedirs(qadir, exist_ok=True)

    galaxy, galaxydir = get_galaxy_galaxydir(sample, region=region,
                                             group=not no_groups,
                                             datadir=datadir)
    I = np.array([os.path.isdir(gdir) for gdir in np.atleast_1d(galaxydir)])
    log.info(f'Found {np.sum(I):,d}/{len(sample):,d} ' + \
             'objects with pipeline results.')

    # check for cutouts and, if missing, generate them
    sample['CUTOUT'] = np.zeros(len(sample), bool)
    fullsample['CUTOUT'] = np.zeros(len(fullsample), bool)
    if np.sum(~I) > 0:
        if np.sum(~I) > 500:
            log.warning('Are you sure you want to generate cutouts for more than 500 objects!!')
            raise ValueError()

        sample['CUTOUT'][~I] = True
        fullsample['CUTOUT'][np.isin(fullsample['GROUP_ID'], sample['GROUP_ID'][~I])] = True

        galaxy, galaxydir = get_galaxy_galaxydir(sample[~I], region=region,
                                                 group=not no_groups,
                                                 datadir=cutoutdir)
        M = [not os.path.isdir(gdir) for gdir in np.atleast_1d(galaxydir)]
        log.info(f'Generating cutouts for {np.sum(M):,d}/{np.sum(~I):,d} ' + \
                 'objects with missing pipeline results.')
        pdb.set_trace()

        if np.sum(M) > 0:
            from SGA.cutouts import do_cutouts

            layer = f'ls-{region}'
            if region == 'dr11-south':
                log.warning(f"WARNING: Overriding layer={layer}-->ls-dr11-early-v2")
                layer = 'ls-dr11-early-v2'

            do_cutouts(sample[~I][M], layer=layer, group=not no_groups,
                       fits_cutouts=False, maxdiam_arcmin=MAXDIAM, mp=mp,
                       cutoutdir=os.path.join(cutoutdir, region))

    #SGA2025_J0170.067+013.549
    #sample = sample[I]
    #fullsample = fullsample[np.isin(fullsample['GROUP_ID'], sample['GROUP_ID'])]
    sample = sample[np.argsort(sample[diamcolumn])]
    fullsample = fullsample[np.argsort(fullsample[diamcolumn])]

    annotated(sample, fullsample, pdffile, region=region,
              datadir=datadir, cutoutdir=cutoutdir,
              no_groups=no_groups)

if __name__ == '__main__':

    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('--first', type=int, help='Index of first object to process.')
    parser.add_argument('--last', type=int, help='Index of last object to process.')
    parser.add_argument('--galaxylist', type=str, default=None, help='Comma-separated list of galaxy names to process.')

    parser.add_argument('--mp', default=1, type=int, help='number of multiprocessing processes per MPI rank.')
    parser.add_argument('--mindiam', default=0., type=float, help='minimum diameter')
    parser.add_argument('--maxdiam', default=200., type=float, help='minimum diameter')
    parser.add_argument('--lvd-resolved', action='store_true', help='Generate QA for the LVD/resolved sample.')
    parser.add_argument('--lvd-fixgeo', action='store_true', help='Generate QA for the LVD/fixgeo sample.')
    parser.add_argument('--lvd-forcepsf', action='store_true', help='Generate QA for the LVD/force-PSF sample.')
    parser.add_argument('--lvd', action='store_true', help='Generate QA for the remaining LVD sample.')
    parser.add_argument('--no-groups', action='store_true', help='Do not show group cutouts.')
    parser.add_argument('--datadir', default=None, type=str, help='Override $SGA_DATA_DIR environment variable')
    parser.add_argument('--region', default='dr11-south', choices=['dr9-north', 'dr11-south'], type=str, help='Region analyze')
    args = parser.parse_args()

    qa_tractor(datadir=args.datadir, region=args.region, first=args.first,
               last=args.last, galaxylist=args.galaxylist, mp=args.mp,
               lvd_resolved=args.lvd_resolved, lvd_fixgeo=args.lvd_fixgeo,
               lvd_forcepsf=args.lvd_forcepsf, lvd=args.lvd, no_groups=args.no_groups,
               mindiam=args.mindiam, maxdiam=args.maxdiam)
