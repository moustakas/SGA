#!/usr/bin/env python
"""MPI wrapper for the Siena Galaxy Atlas 2025 project.

salloc -N 1 -C cpu -A m3592 -t 04:00:00 --qos interactive
SGA2025-shifter
source /global/homes/i/ioannis/code/SGA/bin/SGA2025/SGA2025-env

SGA2025-mpi --build-refcat

# nice isolated spiral
https://www.legacysurvey.org/viewer-dev?ra=192.4227&dec=25.7816&layer=ls-dr9-south&zoom=14&bricks&sga
SGA2025-mpi --galaxylist="KUG 1247+260" --coadds --mp=8 --debug --datadir=/pscratch/sd/i/ioannis/SGA2025-test1
SGA2025-mpi --galaxylist="KUG 1247+260" --ellipse --mp=32 --debug --datadir=/pscratch/sd/i/ioannis/SGA2025-test1
SGA2025-tractor-qa --datadir=/pscratch/sd/i/ioannis/SGA2025-test1

# 2-member group
SGA2025-mpi --galaxylist="III Zw 040 NOTES02" --datadir=/pscratch/sd/i/ioannis/SGA2025-test1 --mp=32 --debug --coadds
SGA2025-mpi --galaxylist="III Zw 040 NOTES02" --datadir=/pscratch/sd/i/ioannis/SGA2025-test1 --mp=32 --debug --ellipse

# SGA source dropped (LVD dwarf)
SGA2025-mpi --galaxylist="dw1239+3251" --datadir=/pscratch/sd/i/ioannis/SGA2025-test1 --mp=32 --debug --coadds
SGA2025-mpi --galaxylist="dw1239+3251" --datadir=/pscratch/sd/i/ioannis/SGA2025-test1 --mp=32 --debug --ellipse


# LVD tests
SGA2025-mpi --galaxylist="KV19-271" --coadds --no-cleanup --mp=32 --debug --datadir=/pscratch/sd/i/ioannis/SGA2025-tmp1

SGA2025-mpi --lvd --coadds --mp=128 --debug --datadir=/pscratch/sd/i/ioannis/SGA2025-lvd
SGA2025-tractor-qa --datadir=/pscratch/sd/i/ioannis/SGA2025-lvd --lvd
SGA2025-tractor-qa --datadir=/pscratch/sd/i/ioannis/SGA2025-lvd --lvd-ignore
SGA2025-tractor-qa --datadir=/pscratch/sd/i/ioannis/SGA2025-lvd --lvd-forcepsf

srun --ntasks=8 shifter --env-file=$CFS/desicollab/users/ioannis/SGA/2025/scripts/SGA2025-shifter-env.sh SGA2025-mpi \
  --coadds --mp=16 --lvd --datadir=/pscratch/sd/i/ioannis/SGA2025-lvd



###
LVD non



###
SGA2025-mpi --coadds --no-galex --no-unwise --no-cleanup --mp=32 --debug


In production:
salloc -N 1 -C cpu -A m3592 -t 04:00:00 --qos interactive --image=docker:legacysurvey/sga:0.3
srun --ntasks=4 shifter --env-file=$CFS/desicollab/users/ioannis/SGA/2025/scripts/SGA2025-shifter-env.sh \
  SGA2025-mpi --coadds --no-galex --no-unwise --no-cleanup --mp=32

source /global/homes/i/ioannis/code/git/SGA/bin/SGA2025/SGA2025-env
SGA2025-mpi --galaxylist=SGA2025_J054.4909-05.0002 --coadds --mp=32 --no-cleanup --region=dr9-south --debug --old-calibs-ok


"""
import os, time, pdb
import numpy as np

from SGA.logger import log


def get_logfile(galaxy, galaxydir, stagesuffix):
    from SGA.io import backup_filename
    logfile = os.path.join(galaxydir, f'{galaxy}-{stagesuffix}.log')
    backup_filename(logfile)
    return logfile


def done(galaxy, galaxydir, err, stagesuffix, debug=False):
    import logging

    donefile = os.path.join(galaxydir, f'{galaxy}-{stagesuffix}')
    if err == 0:
        log.warning(f'Problem processing {galaxydir}/{galaxy}; please check the log file.')
        donefile = f'{donefile}.isfail'
    else:
        donefile = f'{donefile}.isdone'

    # equivalent to 'touch'
    open(donefile, 'w').close()

    # close all file handlers
    if not debug:
        for hh in logging.root.handlers:
            logging.root.removeHandler(hh)
            hh.close()


def main():
    """Top-level wrapper.

    """
    from legacypipe.runs import get_survey

    from SGA.coadds import RUNS, BANDS
    from SGA.mpi import mpi_args
    from SGA.io import set_legacysurvey_dir
    from SGA.SGA import (RACOLUMN, DECCOLUMN, DIAMCOLUMN, FITBITS,
                         sga_dir, sga_data_dir, sga_html_dir,
                         read_sample, missing_files, get_galaxy_galaxydir,
                         build_catalog)

    args = mpi_args()
    set_legacysurvey_dir(args.region)

    basedir = sga_dir()
    if args.datadir is None:
        datadir = sga_data_dir()
    else:
        datadir = args.datadir

    if args.htmldir is None:
        htmldir = sga_html_dir()
    else:
        htmldir = args.htmldir

    run = RUNS[args.region]
    bands = BANDS[args.region]

    try:
        from mpi4py import MPI
        comm = MPI.COMM_WORLD
        rank, size = comm.rank, comm.size
    except:
        comm = None
        rank, size = 0, 1

    # Read and broadcast the sample.
    bricks = None
    if rank == 0:
        if not os.path.isdir(datadir):
            os.makedirs(datadir, exist_ok=True)
        if not os.path.isdir(htmldir):
            os.makedirs(htmldir, exist_ok=True)

        log.info(f'$SGA_DIR={basedir}')
        log.info(f'$SGA_DATA_DIR={datadir}')
        log.info(f'$SGA_HTML_DIR={htmldir}')
        log.info(f'$LARGEGALAXIES_CAT={os.getenv("LARGEGALAXIES_CAT")}')

        sample, fullsample = read_sample(
            first=args.first, last=args.last,
            d25min=args.d25min, d25max=args.d25max,
            galaxylist=args.galaxylist,
            lvd=args.lvd, region=args.region,
            verbose=args.verbose)

        if not args.build_catalog and not args.build_refcat:
            if args.lvd:
                I = sample['GROUP_DIAMETER'] < 3.
                #I = (sample['GROUP_DIAMETER'] < 3.)# * (sample['OBJNAME'] == 'UGCA 292')
                #I = (sample['GROUP_DIAMETER'] < 3.) * (sample['FITBIT'] & FITBITS['forcepsf'] != 0)
                sample = sample[I]
            elif False:
                log.warning('Testing subsamples!')
                I = sample['FITBIT'] & FITBITS['ignore'] != 0
                sample = sample[I]
                sample = sample[np.argsort(sample[DIAMCOLUMN])]
                sample = sample[sample[DIAMCOLUMN] < 10.]
                #sample = sample[:32]
                #sample = sample[sample['GROUP_NAME'] == 'SGA2025_J0177.310-018.413_GROUP']
            else:
                log.warning('Testing subsamples!')
                pass
                #sample = sample[sample['SGANAME'] == 'SGA2025_J0202.291-045.175']
                #sample = sample[sample['OBJNAME'] == 'KV19-271']
                #sample = sample[sample['OBJNAME'] == 'LV J1149+1715']

        if len(sample) == 0:
            return

        if args.coadds or args.build_catalog or args.build_refcat:
            if args.build_catalog:
                sample = sample[np.argsort(sample['GROUP_ID'])] # sort by group_id
    else:
        sample = []
        fullsample = []

    if comm:
        sample = comm.bcast(sample, root=0)
        fullsample = comm.bcast(fullsample, root=0)

    # Building the web-page and integrating the ellipse-fitting
    # results work on the full sample, so do that here and then
    # return.
    if rank == 0:
        if args.htmlindex:
            SGA.html.make_html(sample, survey=None, pixscale=args.pixscale,
                               racolumn=RACOLUMN, deccolumn=DECCOLUMN,
                               mp=args.mp, clobber=args.clobber,
                               region=args.region, makeplots=False,
                               verbose=args.verbose, htmldir=args.htmldir,
                               htmlhome=args.htmlhome,
                               html_raslices=args.html_raslices,
                               args=args)
            return

        if args.build_refcat:
            # Build a reference catalog for use with the
            # pipeline. Satellites can belong to more than one group,
            # so trim to unique IDs.
            import fitsio
            from astropy.table import Table
            from SGA.SGA import SGA_version, REFCAT

            version = SGA_version()
            ngal = len(fullsample)

            ref = Table()
            ref['ra'] = fullsample['RA']
            ref['dec'] = fullsample['DEC']
            ref['ref_id'] = fullsample['SGAID']
            ref['mag'] = fullsample['MAG']
            ref['pa'] = fullsample['PA']
            ref['ba'] = fullsample['BA']
            ref['diam'] = fullsample['DIAM'] # [arcmin]
            for col in ['pa', 'ba', 'diam', 'mag']:
                assert(np.all(np.isfinite(ref[col])))

            reffile = os.path.join(basedir, f'SGA2025-{version}-refcat.fits')
            kdreffile = reffile.replace('.fits', '.kd.fits')
            log.info(f'Writing {ngal} galaxies to {reffile}')

            hdr = fitsio.FITSHDR()
            hdr['VER'] = REFCAT
            fitsio.write(reffile, ref.as_array(), header=hdr, clobber=True)

            log.info(f'Writing {kdreffile}')
            cmd = f'startree -i {reffile} -o {kdreffile} -T -P -k -n stars'
            log.info(cmd)
            _ = os.system(cmd)

            cmd = f'modhead {kdreffile} VER {REFCAT}'
            _ = os.system(cmd)

            return


        if args.build_catalog:
            build_catalog(sample, fullsample, bands=bands, unwise=True,
                          galex=True, mp=args.mp, verbose=args.verbose,
                          refcat=refcat, clobber=args.clobber)
            return

    # Determine how many more galaxies we need to analyze and divide them across
    # ranks.
    if rank == 0:
        suffix, groups, _, fail = missing_files(
            sample=sample, region=args.region, bricks=bricks,
            coadds=args.coadds, ellipse=args.ellipse,
            htmlplots=args.htmlplots, htmlindex=args.htmlindex,
            clobber=args.clobber, verbose=args.verbose,
            datadir=datadir, htmldir=htmldir, size=size,
            mp=args.mp)
    else:
        groups, suffix = [], ''

    if comm:
        groups = comm.bcast(groups, root=0)
        suffix = comm.bcast(suffix, root=0)

    if rank == 0:
        ntodo = len(np.hstack(groups))
        log.info(f'{suffix.upper()} left to do: {ntodo:,d} / ' + \
                 f'{len(sample):,d} divided across {size} rank(s).')

    if len(groups[rank]) == 0:
        log.info(f'{suffix.upper()} for all {len(sample)} galaxies on rank ' + \
                 f'{rank} are complete!')
        return
    else:
        log.info(f' Rank {rank}: {len(groups[rank])} galaxies left to do.')
        if rank == 0 and args.count:
            if args.debug:
                if len(fail[rank]) > 0:
                    log.info(f'{suffix.upper()} failures: {len(fail[rank])} / ' + \
                             f'{len(sample)}')
                    dsrt = np.argsort(sample[fail[rank]][DIAMCOLUMN])
                    galaxy, galaxydir = get_galaxy_galaxydir(
                        sample[fail[rank]][dsrt], region=args.region,
                        datadir=datadir, htmldir=htmldir)
                    for ii, dd, diam in zip(fail[rank], np.atleast_1d(galaxydir),
                                            sample[fail[rank]][DIAMCOLUMN][dsrt]):
                        print(f'  {ii} {dd} (d={diam:.3f} arcmin)')

                todo = np.hstack(groups)
                if len(todo) > 0:
                    log.info(f'{suffix.upper()} todo: {len(todo):,d} / {len(sample):,d}')
                    galaxy, galaxydir = get_galaxy_galaxydir(
                        sample[todo], region=args.region,
                        datadir=datadir, htmldir=htmldir)
                    for ii, dd, diam in zip(todo, np.atleast_1d(galaxydir),
                                            sample[todo][DIAMCOLUMN]):
                        log.info(f'  {ii} {dd} (d={diam:.3f} arcmin)')
            return

    # Loop on the remaining objects.
    log.info(f'Starting {len(groups[rank])} {suffix.upper()} ' + \
             f'on rank {rank} with {args.mp} cores on {time.asctime()}')

    # The rest of the pipeline--
    if rank == 0:
        tall = time.time()

    for count, ii in enumerate(groups[rank]):
        onegal = sample[ii]
        galaxy, galaxydir = get_galaxy_galaxydir(onegal, region=args.region,
                                                 datadir=datadir, htmldir=htmldir)
        if not os.path.isdir(galaxydir):
            os.makedirs(galaxydir, exist_ok=True)

        log.info(f'Rank {rank:03d} ({count+1} / {len(groups[rank])}): ' + \
                 f'{galaxydir} (index {ii:,d})')

        if args.debug:
            logfile = None
        else:
            from contextlib import redirect_stdout, redirect_stderr
            logfile = get_logfile(galaxy, galaxydir, suffix)
            log.debug(f'Logging output to {logfile}')

        # Need the object "radius" to build the coadds.
        diam = onegal[DIAMCOLUMN] # [arcmin]
        if diam < 0.5:
            diam = 0.5
        radius_mosaic_arcsec = 60. * diam / 2. # [arcsec]

        if diam > 10.:
            radius_mosaic_arcsec *= 1.1
        elif diam > 3. and diam <= 10:
            radius_mosaic_arcsec *= 1.1
        else:
            radius_mosaic_arcsec *= 1.1

        if radius_mosaic_arcsec > 600.:
            args.nsigma = None # 100.
        else:
            args.nsigma = None # 20.

        survey = get_survey(run, allbands=bands, output_dir=galaxydir)

        if args.coadds:
            from SGA.coadds import custom_coadds

            log.warning('Undo --old-calibs-ok in custom_coadds when ready!')

            # Write out the individual galaxies for this mosaic.
            I = np.where(onegal['GROUP_ID'] == fullsample['GROUP_ID'])[0]
            thissample = fullsample[I]
            samplefile = os.path.join(galaxydir, f'{galaxy}-sample.fits')
            if args.clobber or not os.path.isfile(samplefile):
                log.debug(f'Writing {len(thissample)} galaxy(ies) ' + \
                          f'to {samplefile}')
                tmpfile = samplefile+'.tmp'
                thissample.write(tmpfile, overwrite=True, format='fits')
                os.rename(tmpfile, samplefile)

            # force PSF
            if onegal['FITBIT'] & FITBITS['forcepsf'] != 0:
                force_psf_detection = True
            else:
                force_psf_detection = False

            if args.debug:
                err, filesuffix = custom_coadds(
                    onegal, galaxy, survey, run, radius_mosaic_arcsec,
                    pixscale=args.pixscale, bands=bands, mp=args.mp,
                    nsigma=args.nsigma, racolumn=RACOLUMN, deccolumn=DECCOLUMN,
                    just_coadds=args.just_coadds, force=args.force,
                    force_psf_detection=force_psf_detection,
                    cleanup=args.cleanup, unwise=args.unwise, galex=args.galex,
                    verbose=args.verbose)
            else:
                with open(logfile, 'w') as L:
                    with redirect_stdout(L), redirect_stderr(L):
                        err, filesuffix = custom_coadds(
                            onegal, galaxy, survey, run, radius_mosaic_arcsec,
                            pixscale=args.pixscale, bands=bands, mp=args.mp,
                            nsigma=args.nsigma, just_coadds=args.just_coadds,
                            force_psf_detection=force_psf_detection,
                            force=args.force, cleanup=args.cleanup,
                            unwise=args.unwise, galex=args.galex,
                            verbose=args.verbose)
            done(galaxy, galaxydir, err, suffix, debug=args.debug)


        if args.ellipse:
            from SGA.SGA import read_multiband, SBTHRESH, APERTURES
            from SGA.ellipse import ellipsefit_multiband

            data = read_multiband(
                galaxy, galaxydir, bands=bands,
                pixscale=args.pixscale, unwise=args.unwise,
                galex=args.galex, verbose=args.verbose)

            pdb.set_trace()

            ellipsefit_multiband(data, galaxy=galaxy, galaxydir=galaxydir,
                         bands=bands, refband='r',
                         pixscale=args.pixscale, mp=args.mp,
                         verbose=args.verbose, debug=args.debug,
                         write_mask=True,
                         clobber=args.clobber,
                         unwise=True, galex=True,
                         logfile=logfile)

        if args.htmlplots:
            from SGA.mpi import call_htmlplots

            if radius_mosaic_arcsec > 6 * 60: # [>6] arcmin
                barlabel = '2 arcmin'
                barlen = np.ceil(120 / args.pixscale).astype(int) # [pixels]
            elif (radius_mosaic_arcsec > 3 * 60) & (radius_mosaic_arcsec < 6 * 60): # [3-6] arcmin
                barlabel = '1 arcmin'
                barlen = np.ceil(60 / args.pixscale).astype(int) # [pixels]
            else:
                barlabel = '30 arcsec'
                barlen = np.ceil(30 / args.pixscale).astype(int) # [pixels]
            call_htmlplots(onegal, galaxy, survey, pixscale=args.pixscale,
                           mp=args.mp, verbose=args.verbose, debug=args.debug,
                           clobber=args.clobber, logfile=logfile,
                           htmldir=htmldir, datadir=datadir,
                           barlen=barlen, barlabel=barlabel,
                           radius_mosaic_arcsec=radius_mosaic_arcsec,
                           galex=True, unwise=True,
                           region=args.region,
                           get_galaxy_galaxydir=get_galaxy_galaxydir,
                           read_multiband=read_multiband)

    if rank == 0:
        log.info(f'Finished {ntodo} {suffix.upper()} at {time.asctime()} ' + \
                 f'after {(time.time()-tall)/60.:.3f} minutes')
        _, groups, _, _ = missing_files(sample=sample, region=args.region,
                                        bricks=bricks, coadds=args.coadds,
                                        ellipse=args.ellipse,
                                        htmlplots=args.htmlplots,
                                        htmlindex=args.htmlindex,
                                        #clobber=args.clobber,
                                        verbose=args.verbose,
                                        datadir=datadir, htmldir=htmldir,
                                        size=size, mp=args.mp)

        if len(groups) > 0:
            stilltodo = len(np.hstack(groups))
        else:
            stilltodo = 0
        log.info(f'{suffix.upper()} left to do: {stilltodo} / {ntodo}.')



if __name__ == '__main__':
    main()
