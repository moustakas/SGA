#!/usr/bin/env python
"""MPI wrapper for the Siena Galaxy Atlas 2025 project.

salloc -N 1 -C cpu -A m3592 -t 04:00:00 --qos interactive
SGA2025-shifter
source /global/homes/i/ioannis/code/git/SGA/bin/SGA2025/SGA2025-env

SGA2025-mpi --build-refcat
SGA2025-mpi --galaxylist=SGA2025_J054.4909-05.0002 --coadds --debug

In production:
salloc -N 1 -C cpu -A m3592 -t 00:30:00 --qos interactive --image=docker:legacysurvey/sga:0.3

source /global/homes/i/ioannis/code/git/SGA/bin/SGA2025/SGA2025-env
SGA2025-mpi --galaxylist=SGA2025_J054.4909-05.0002 --coadds --mp=32 --no-cleanup


"""
def main():
    """Top-level wrapper.

    """
    import os, time, pdb
    import numpy as np
    from contextlib import redirect_stdout, redirect_stderr

    from legacypipe.runs import get_survey

    from SGA.coadds import RUNS, BANDS
    from SGA.mpi import mpi_args
    from SGA.io import (set_legacysurvey_dir, sga_dir, sga_data_dir, sga_html_dir, read_sample,
                        build_catalog, missing_files, read_multiband, get_galaxy_galaxydir,
                        RACOLUMN, DECCOLUMN, DIAMCOLUMN)

    from SGA.logger import log

    args = mpi_args()
    set_legacysurvey_dir(args.region)

    basedir = sga_dir()
    datadir = sga_data_dir()
    htmldir = sga_html_dir()

    run = RUNS[args.region]
    bands = BANDS[args.region]

    try:
        from mpi4py import MPI
        comm = MPI.COMM_WORLD
        rank, size = comm.rank, comm.size
    except:
        comm = None
        rank, size = 0, 1

    # Read and broadcast the sample.
    final_sample = False
    bricks = None
    groups, stagesuffix = [], ''

    sample, fullsample = None, None    
    if rank == 0:
        log.info(f'$SGA_DIR={basedir}')
        log.info(f'$SGA_DATA_DIR={datadir}')
        log.info(f'$SGA_HTML_DIR={htmldir}')

        sample = read_sample(first=args.first, last=args.last,
                             d25min=args.d25min, d25max=args.d25max, 
                             fullsample=False, galaxylist=args.galaxylist,
                             region=args.region, verbose=args.verbose)

        if len(sample) == 0:
            return

        if args.coadds or args.build_catalog or args.build_refcat:
            refcat = 'L4'
            # For the custom coadds and build_catalog steps we need the full sample, too.
            fullsample = read_sample(verbose=args.verbose, region=args.region, fullsample=True)
            fullsample = fullsample[np.isin(fullsample['GROUP_ID'], sample['GROUP_ID'])]

            if args.build_catalog:
                sample = sample[np.argsort(sample['GROUP_ID'])] # sort by group_id

    if comm:
        sample = comm.bcast(sample, root=0)
        fullsample = comm.bcast(fullsample, root=0)
    
    # Building the web-page and integrating the ellipse-fitting
    # results work on the full sample, so do that here and then
    # return.
    if rank == 0:    
        if args.htmlindex:
            SGA.html.make_html(sample, survey=None, pixscale=args.pixscale,
                               racolumn=RACOLUMN, deccolumn=DECCOLUMN, #diamcolumn=DIAMCOLUMN,
                               mp=args.mp, clobber=args.clobber, region=args.region,
                               makeplots=False, verbose=args.verbose, htmldir=args.htmldir,
                               htmlhome=args.htmlhome, html_raslices=args.html_raslices,
                               args=args)
            return

        if args.build_refcat:
            # Build a reference catalog for use with the
            # pipeline. Satellites can belong to more than one group,
            # so trim to unique IDs.
            
            import fitsio
            from astropy.table import Table
            from SGA.io import SGA_version

            version = SGA_version()
            ngal = len(fullsample)

            ref = Table()
            ref['ra'] = fullsample['RA']
            ref['dec'] = fullsample['DEC']
            ref['id'] = fullsample['SGAID']
            ref['mag'] = fullsample['MAG']
            ref['pa'] = fullsample['PA']
            ref['ba'] = fullsample['BA']
            ref['diam'] = fullsample['DIAM'] # [arcmin]
            assert(np.all(np.isfinite(ref['mag'])))

            reffile = os.path.join(basedir, f'SGA2025-{version}-refcat.fits')
            kdreffile = reffile.replace('.fits', '.kd.fits')
            log.info(f'Writing {ngal} galaxies to {reffile}')

            hdr = fitsio.FITSHDR()
            hdr['VER'] = refcat
            fitsio.write(reffile, ref.as_array(), header=hdr, clobber=True)

            log.info(f'Writing {kdreffile}')
            cmd = f'startree -i {reffile} -o {kdreffile} -T -P -k -n stars'
            log.info(cmd)
            _ = os.system(cmd)

            cmd = f'modhead {kdreffile} SGAVER {hdrver}'
            _ = os.system(cmd)
            return


        if args.build_catalog:
            build_catalog(sample, fullsample, bands=bands, unwise=True,
                          galex=True, mp=args.mp, verbose=args.verbose,
                          refcat=refcat, clobber=args.clobber)
            return

    # Determine how many more galaxies we need to analyze and divide them across
    # ranks.
    if rank == 0:    
        suffix, groups, _, fail = missing_files(
            sample=sample, region=args.region, bricks=bricks, coadds=args.coadds,
            ellipse=args.ellipse, htmlplots=args.htmlplots, htmlindex=args.htmlindex,
            clobber=args.clobber, verbose=args.verbose, htmldir=htmldir, size=size,
            mp=args.mp)

    else:
        groups, suffix = [], ''
    
    if comm:
        groups = comm.bcast(groups, root=0)
        suffix = comm.bcast(suffix, root=0)

    if rank == 0:
        ntodo = len(np.hstack(groups))
        log.info(f'{suffix.upper()} left to do: {ntodo} / {len(sample)} ' + \
                 f'divided across {size} rank(s).')

        
    if len(groups[rank]) == 0:
        log.info(f'{suffix.upper()} for all {len(sample)} galaxies on rank ' + \
                 f'{rank} are complete!')
        return
    else:
        log.info(f' Rank {rank}: {len(groups[rank])} galaxies left to do.')
        if rank == 0 and args.count:
            if args.debug:
                if len(fail[rank]) > 0:
                    log.info(f'{suffix.upper()} failures: {len(fail[rank])} / {len(sample)}')
                    dsrt = np.argsort(sample[fail[rank]][DIAMCOLUMN])
                    galaxy, galaxydir = get_galaxy_galaxydir(sample[fail[rank]][dsrt], region=args.region)
                    for ii, dd, diam in zip(fail[rank], np.atleast_1d(galaxydir), sample[fail[rank]][DIAMCOLUMN][dsrt]):
                        print('  {} {} (d={:.3f} arcmin)'.format(ii, dd, diam))

                todo = np.hstack(groups)
                if len(todo) > 0:
                    log.info(f'{suffix.upper()} todo: {len(todo):,d} / {len(sample):,d}')
                    galaxy, galaxydir = get_galaxy_galaxydir(sample[todo], region=args.region)
                    for ii, dd, diam in zip(todo, np.atleast_1d(galaxydir), sample[todo][DIAMCOLUMN]):
                        log.info(f'  {ii} {dd} (d={diam:.3f} arcmin)')
            return
        
    # Loop on the remaining objects.
    log.info(f'Starting {len(groups[rank])} {suffix.upper()} on rank {rank} ' + \
             f'with {args.mp} cores on {time.asctime()}')

    # The rest of the pipeline--
    tall = time.time()
    for count, ii in enumerate(groups[rank]):
        onegal = sample[ii]
        galaxy, galaxydir = get_galaxy_galaxydir(onegal, region=args.region)
        if not os.path.isdir(galaxydir):
            os.makedirs(galaxydir, exist_ok=True)

        #if (count+1) % 10 == 0:
        log.info(f'Rank {rank:03d} ({count+1} / {len(groups[rank])}): {galaxydir} (index {ii:,d})')

        if args.debug:
            logfile = None
        else:
            logfile = os.path.join(galaxydir, f'{galaxy}-{suffix}.log')

        # Need the object "radius" to build the coadds.
        if onegal[DIAMCOLUMN] > 10:
            radius_mosaic_arcsec = onegal[DIAMCOLUMN] / 2 * 1.1 * 60 # [arcsec]
        elif onegal[DIAMCOLUMN] > 3 and onegal[DIAMCOLUMN] <= 10:
            radius_mosaic_arcsec = onegal[DIAMCOLUMN] / 2 * 1.5 * 60 # [arcsec]
        else:
            radius_mosaic_arcsec = onegal[DIAMCOLUMN] / 2 * 2 * 60   # [arcsec]

        survey = get_survey(run, allbands=bands, output_dir=galaxydir)

        if args.coadds:
            from SGA.coadds import custom_coadds

            # Write out the individual galaxies for this mosaic.
            thissample = fullsample[np.where(onegal['GROUP_ID'] == fullsample['GROUP_ID'])[0]]
            samplefile = os.path.join(galaxydir, f'{galaxy}-sample.fits')
            if args.clobber or not os.path.isfile(samplefile):
                log.debug(f'Writing {len(thissample)} galaxy(ies) to {samplefile}')
                tmpfile = samplefile+'.tmp'
                thissample.write(tmpfile, overwrite=True, format='fits')
                os.rename(tmpfile, samplefile)

            if args.debug:
                err, filesuffix = custom_coadds(
                    onegal, galaxy, survey, radius_mosaic_arcsec, pixscale=args.pixscale,
                    bands=bands, mp=args.mp, nsigma=args.nsigma, just_coadds=args.just_coadds,
                    force=args.force, cleanup=args.cleanup, unwise=args.unwise, galex=args.galex,
                    verbose=args.verbose)
            else:
                #logfile = 'junk.txt'
                #with stdouterr_redirected(to=logfile, overwrite=args.clobber, comm=None) as F:
                #with redirect_stdout(L), redirect_stderr(L):
                #import logging
                #L = logging.FileHandler(logfile, mode='w')
                #log.addHandler(L)
                with open(logfile, 'a') as L:
                    with redirect_stdout(L), redirect_stderr(L):
                        err, filesuffix = custom_coadds(
                            onegal, galaxy, survey, radius_mosaic_arcsec, pixscale=args.pixscale,
                            bands=bands, mp=args.mp, nsigma=args.nsigma, just_coadds=args.just_coadds,
                            force=args.force, cleanup=args.cleanup, unwise=args.unwise, galex=args.galex,
                            verbose=args.verbose)

            #return
            #pdb.set_trace()
            #call_custom_coadds(onegal, galaxy, survey, run, radius_mosaic_arcsec, mp=args.mp,
            #                   pixscale=args.pixscale, racolumn=RACOLUMN, deccolumn=DECCOLUMN,
            #                   custom=True, unwise=args.unwise, galex=args.galex, force=args.force,
            #                   bands=bands, plots=False, verbose=args.verbose, cleanup=args.cleanup, nsigma=None,
            #                   write_all_pickles=True, just_coadds=args.just_coadds, no_gaia=False,
            #                   no_tycho=False, debug=args.debug, logfile=logfile)

        if args.ellipse:
            from SGA.mpi import call_ellipse
            
            call_ellipse(onegal, galaxy=galaxy, galaxydir=galaxydir,
                         bands=['g', 'r', 'z'], refband='r',
                         pixscale=args.pixscale, mp=args.mp,
                         verbose=args.verbose, debug=args.debug,
                         #sky_tests=args.sky_tests,
                         write_mask=True,
                         clobber=args.clobber,
                         unwise=True, galex=True,
                         logfile=logfile)
                             
        if args.htmlplots:
            from SGA.mpi import call_htmlplots
            
            if radius_mosaic_arcsec > 6 * 60: # [>6] arcmin
                barlabel = '2 arcmin'
                barlen = np.ceil(120 / args.pixscale).astype(int) # [pixels]
            elif (radius_mosaic_arcsec > 3 * 60) & (radius_mosaic_arcsec < 6 * 60): # [3-6] arcmin
                barlabel = '1 arcmin'
                barlen = np.ceil(60 / args.pixscale).astype(int) # [pixels]
            else:
                barlabel = '30 arcsec'
                barlen = np.ceil(30 / args.pixscale).astype(int) # [pixels]
            call_htmlplots(onegal, galaxy, survey, pixscale=args.pixscale, mp=args.mp,
                           verbose=args.verbose, debug=args.debug, clobber=args.clobber,
                           logfile=logfile, 
                           htmldir=htmldir, datadir=datadir,
                           barlen=barlen, barlabel=barlabel,
                           radius_mosaic_arcsec=radius_mosaic_arcsec,
                           #galaxy_id=onegal['VF_ID'],                           
                           galex=True, unwise=True,
                           region=args.region, get_galaxy_galaxydir=get_galaxy_galaxydir,
                           read_multiband=read_multiband)                           

    # Wait for all ranks to finish.
    if comm is not None:
        comm.barrier()
                
    if rank == 0:
        log.info(f'Finished {ntodo} {suffix.upper()} at {time.asctime()} ' + \
                 f'after {time.time():.3f} minutes')
        _, groups, _, _ = missing_files(sample=sample, region=args.region, bricks=bricks,
                                        coadds=args.coadds, ellipse=args.ellipse,
                                        htmlplots=args.htmlplots, htmlindex=args.htmlindex,
                                        clobber=args.clobber, verbose=args.verbose,
                                        htmldir=htmldir, size=size, mp=args.mp)
        if len(groups) > 0:
            stilltodo = len(np.hstack(groups))
        else:
            stilltodo = 0
        log.info(f'{suffix.upper()} left to do: {stilltodo} / {ntodo}.')


if __name__ == '__main__':
    main()
