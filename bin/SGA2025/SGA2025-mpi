#!/usr/bin/env python
"""MPI wrapper for the Siena Galaxy Atlas 2025 project.

salloc -N 1 -C cpu -A m3592 -t 04:00:00 --qos interactive
SGA2025-shifter
source /global/homes/i/ioannis/code/git/SGA/bin/SGA2025/SGA2025-env

SGA2025-mpi --galaxylist=SGA2025_J054.4909-05.0002 --coadds --debug

"""
import os, time, pdb
import numpy as np

from desiutil.log import get_logger#, DEBUG
log = get_logger()

    
def main():
    """Top-level wrapper.

    """
    import SGA.io
    from SGA.io import get_galaxy_galaxydir, RACOLUMN, DECCOLUMN, DIAMCOLUMN
    from SGA.coadds import RUNS, BANDS
    from SGA.mpi import mpi_args
    from legacypipe.runs import get_survey

    args = mpi_args()

    SGA.io.set_legacysurvey_dir(args.region)

    basedir = SGA.io.sga_dir()
    datadir = SGA.io.sga_data_dir()
    htmldir = SGA.io.sga_html_dir()

    if args.mpi:
        from mpi4py import MPI
        comm = MPI.COMM_WORLD
        rank, size = comm.rank, comm.size
    else:
        comm = None
        rank, size = 0, 1

    # Read and broadcast the sample.
    final_sample = False
    bricks = None
    groups, stagesuffix = [], ''

    sample, fullsample = None, None    
    if rank == 0:
        log.info(f'$SGA_DIR={basedir}')
        log.info(f'$SGA_DATA_DIR={datadir}')
        log.info(f'$SGA_HTML_DIR={htmldir}')

        sample = SGA.io.read_sample(first=args.first, last=args.last,
                                    d25min=args.d25min, d25max=args.d25max, 
                                    fullsample=False, galaxylist=args.galaxylist,
                                    region=args.region, verbose=args.verbose)
        pdb.set_trace()

        if len(sample) == 0:
            return

        if args.coadds or args.build_catalog or args.build_refcat:
            refcat = 'L4'
            # For the custom coadds and build_catalog steps we need the full sample, too.
            fullsample = SGA.io.read_sample(verbose=args.verbose, region=args.region, fullsample=True)
            fullsample = fullsample[np.isin(fullsample['GROUP_ID'], sample['GROUP_ID'])]

            if args.build_catalog:
                sample = sample[np.argsort(sample['GROUP_ID'])] # sort by group_id

    if comm:
        sample = comm.bcast(sample, root=0)
        fullsample = comm.bcast(fullsample, root=0)
    
    # Building the web-page and integrating the ellipse-fitting
    # results work on the full sample, so do that here and then
    # return.
    if rank == 0:    
        if args.htmlindex:
            SGA.html.make_html(sample, survey=None, pixscale=args.pixscale,
                               racolumn=RACOLUMN, deccolumn=DECCOLUMN, diamcolumn=DIAMCOLUMN,
                               mp=args.mp, clobber=args.clobber, region=args.region,
                               makeplots=False, verbose=args.verbose, htmldir=args.htmldir,
                               htmlhome=args.htmlhome, html_raslices=args.html_raslices,
                               args=args)
            return

        if args.build_refcat:
            # Build a reference catalog for use with the
            # pipeline. Satellites can belong to more than one group,
            # so trim to unique IDs.
            
            import fitsio
            from astropy.table import Table
            version = SGA.io.parent_version()
            ngal = len(fullsample)

            ref = Table()
            ref['ra'] = fullsample['RA']
            ref['dec'] = fullsample['DEC']
            ref['id'] = fullsample['SGAID']
            ref['mag'] = fullsample['MAG']
            ref['pa'] = fullsample['PA']
            ref['ba'] = fullsample['BA']
            ref['diam'] = fullsample['DIAM'] # [arcmin]
            assert(np.all(np.isfinite(ref['mag'])))

            reffile = os.path.join(basedir, f'SGA2025-{version}-refcat.fits')
            kdreffile = reffile.replace('.fits', '.kd.fits')
            print(f'Writing {ngal} galaxies to {reffile}')

            hdr = fitsio.FITSHDR()
            hdrver = refcat
            hdr['VER'] = hdrver
            fitsio.write(reffile, ref.as_array(), header=hdr, clobber=True)

            print(f'Writing {kdreffile}')
            cmd = f'startree -i {reffile} -o {kdreffile} -T -P -k -n stars'
            print(cmd)
            _ = os.system(cmd)

            cmd = f'modhead {kdreffile} SGAVER {hdrver}'
            _ = os.system(cmd)
            return


        if args.build_catalog:
            SGA.io.build_catalog(sample, fullsample, bands=['g', 'r', 'i', 'z'], 
                                 unwise=True, galex=True, mp=args.mp,
                                 verbose=args.verbose, refcat=refcat,
                                 clobber=args.clobber)
            return

    # Determine how many more galaxies we need to analyze and divide them across
    # ranks.
    if rank == 0:    
        suffix, groups, _, fail = SGA.io.missing_files(
            sample=sample, region=args.region, bricks=bricks,coadds=args.coadds,
            ellipse=args.ellipse, htmlplots=args.htmlplots, 
            htmlindex=args.htmlindex, build_catalog=args.build_catalog, 
            clobber=args.clobber, verbose=args.verbose, 
            htmldir=htmldir, size=size, mp=args.mp)

    else:
        groups, suffix = [], ''
    
    if comm:
        groups = comm.bcast(groups, root=0)
        suffix = comm.bcast(suffix, root=0)

    if rank == 0:
        ntodo = len(np.hstack(groups))
        print('{} left to do: {} / {} divided across {} rank(s).'.format(
            suffix.upper(), ntodo, len(sample), size), flush=True)
        
    # Wait for all ranks to catch up.
    if comm is not None:
        comm.barrier()

    if len(groups[rank]) == 0:
        print('{} for all {} galaxies on rank {} are complete!'.format(
            suffix.upper(), len(sample), rank), flush=True)
        return
    else:
        print(' Rank {}: {} galaxies left to do.'.format(rank, len(groups[rank])), flush=True)
        if rank == 0 and args.count:
            if args.debug:
                if len(fail[rank]) > 0:
                    print('{} failures: {} / {}'.format(suffix.upper(), len(fail[rank]), len(sample)), flush=True)
                    dsrt = np.argsort(sample[fail[rank]][DIAMCOLUMN])
                    galaxy, galaxydir = get_galaxy_galaxydir(sample[fail[rank]][dsrt], region=args.region)
                    for ii, dd, diam in zip(fail[rank], np.atleast_1d(galaxydir), sample[fail[rank]][DIAMCOLUMN][dsrt]):
                        print('  {} {} (d={:.3f} arcmin)'.format(ii, dd, diam))

                todo = np.hstack(groups)
                if len(todo) > 0:
                    print('{} todo: {} / {}'.format(suffix.upper(), len(todo), len(sample)), flush=True)
                    galaxy, galaxydir = get_galaxy_galaxydir(sample[todo], region=args.region)
                    for ii, dd, diam in zip(todo, np.atleast_1d(galaxydir), sample[todo][DIAMCOLUMN]):
                        print('  {} {} (d={:.3f} arcmin)'.format(ii, dd, diam))
            return
        
    # Loop on the remaining objects.
    print('Starting {} {} on rank {} with {} cores on {}'.format(
        len(groups[rank]), suffix.upper(), rank, args.mp, time.asctime()),
        flush=True)

    # The rest of the pipeline--
    tall = time.time()
    for count, ii in enumerate(groups[rank]):
        onegal = sample[ii]
        galaxy, galaxydir = get_galaxy_galaxydir(onegal, region=args.region)
        if not os.path.isdir(galaxydir):
            os.makedirs(galaxydir, exist_ok=True)

        #if (count+1) % 10 == 0:
        print(f'Rank {rank:03d} ({count+1} / {len(groups[rank])}): {galaxydir} (index {ii:,d})', flush=True)

        if args.debug:
            logfile = None
        else:
            logfile = os.path.join(galaxydir, f'{galaxy}-{suffix}.log')

        # Need the object "radius" to build the coadds.
        if onegal[DIAMCOLUMN] > 10:
            radius_mosaic_arcsec = onegal[DIAMCOLUMN] / 2 * 1.1 * 60 # [arcsec]
        elif onegal[DIAMCOLUMN] > 3 and onegal[DIAMCOLUMN] <= 10:
            radius_mosaic_arcsec = onegal[DIAMCOLUMN] / 2 * 1.5 * 60 # [arcsec]
        else:
            radius_mosaic_arcsec = onegal[DIAMCOLUMN] / 2 * 2 * 60   # [arcsec]

        run = RUNS[args.region]
        bands = BANDS[args.region]
        survey = get_survey(run, allbands=bands, output_dir=galaxydir)

        if args.coadds:
            from SGA.mpi import call_custom_coadds

            # Write out the individual galaxies for this mosaic.
            thissample = fullsample[np.where(onegal['GROUP_ID'] == fullsample['GROUP_ID'])[0]]
            samplefile = os.path.join(galaxydir, '{}-sample.fits'.format(galaxy))
            if args.clobber or not os.path.isfile(samplefile):
                #print('Writing {} galaxy(ies) to {}'.format(len(thissample), samplefile))
                tmpfile = samplefile+'.tmp'
                thissample.write(tmpfile, overwrite=True, format='fits')
                os.rename(tmpfile, samplefile)

            call_custom_coadds(onegal, galaxy, survey, run, radius_mosaic_arcsec, mp=args.mp,
                               pixscale=args.pixscale, racolumn=RACOLUMN, deccolumn=DECCOLUMN,
                               custom=True, apodize=False, unwise=args.unwise, galex=args.galex,
                               force=args.force, plots=False,
                               verbose=args.verbose, cleanup=args.cleanup, write_all_pickles=True,
                               just_coadds=args.just_coadds, no_gaia=False, no_tycho=False,
                               require_grz=True, debug=args.debug, logfile=logfile,
                               write_wise_psf=True)


        if args.ellipse:
            from SGA.mpi import call_ellipse
            
            call_ellipse(onegal, galaxy=galaxy, galaxydir=galaxydir,
                         bands=['g', 'r', 'z'], refband='r',
                         pixscale=args.pixscale, mp=args.mp,
                         verbose=args.verbose, debug=args.debug,
                         #sky_tests=args.sky_tests,
                         write_mask=True,
                         clobber=args.clobber,
                         unwise=True, galex=True,
                         logfile=logfile)
                             
        if args.htmlplots:
            from SGA.mpi import call_htmlplots
            
            if radius_mosaic_arcsec > 6 * 60: # [>6] arcmin
                barlabel = '2 arcmin'
                barlen = np.ceil(120 / args.pixscale).astype(int) # [pixels]
            elif (radius_mosaic_arcsec > 3 * 60) & (radius_mosaic_arcsec < 6 * 60): # [3-6] arcmin
                barlabel = '1 arcmin'
                barlen = np.ceil(60 / args.pixscale).astype(int) # [pixels]
            else:
                barlabel = '30 arcsec'
                barlen = np.ceil(30 / args.pixscale).astype(int) # [pixels]
            call_htmlplots(onegal, galaxy, survey, pixscale=args.pixscale, mp=args.mp,
                           verbose=args.verbose, debug=args.debug, clobber=args.clobber,
                           logfile=logfile, 
                           htmldir=htmldir, datadir=datadir,
                           barlen=barlen, barlabel=barlabel,
                           radius_mosaic_arcsec=radius_mosaic_arcsec,
                           #galaxy_id=onegal['VF_ID'],                           
                           galex=True, unwise=True,
                           region=args.region, get_galaxy_galaxydir=get_galaxy_galaxydir,
                           read_multiband=SGA.io.read_multiband)                           

    # Wait for all ranks to finish.
    if comm is not None:
        comm.barrier()
                
    if rank == 0:
        print('Finished {} {} at {} after {:.3f} minutes'.format(
            ntodo, suffix.upper(), time.asctime(), (time.time() - tall) / 60 ), flush=True)
        _, groups, _, _ = SGA.io.missing_files(args, sample, size, clobber_overwrite=False)
        if len(groups) > 0:
            stilltodo = len(np.hstack(groups))
        else:
            stilltodo = 0
        print('{} left to do: {} / {}.'.format(suffix.upper(), stilltodo, ntodo), flush=True)


if __name__ == '__main__':
    main()
