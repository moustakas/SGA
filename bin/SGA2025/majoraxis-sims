#!/usr/bin/env python

"""Simple simulations to characterize the "majoraxis" inferred by mge.find_galaxy

"""

import os, pdb
import numpy as np
import matplotlib.pyplot as plt
from astropy.convolution import convolve, Gaussian2DKernel
from astropy.visualization import simple_norm

from SGA.geometry import EllipseProperties
from SGA.find_galaxy import find_galaxy


def build_model(nx=240, ny=240, reff=35., sersicn=1., ba=0.5, pa=0.,
                x0=None, y0=None, seed=1, snr=30., add_noise=False,
                do_psf=False):
    """

    reff - pixels?
    sersicn -
    eps -
    theta - degrees
    x0, y0 - pixels

    https://statmorph.readthedocs.io/en/latest/notebooks/tutorial.html#Setting-up

    """
    from astropy.modeling.models import Sersic2D

    if x0 is None:
        x0 = nx / 2.
    if y0 is None:
        y0 = ny / 2.

    yy, xx = np.mgrid[:ny, :nx]

    sersic_model = Sersic2D(amplitude=1e3, r_eff=reff, n=sersicn, x_0=x0,
                            y_0=y0, ellip=1.-ba, theta=np.radians(90.-pa))
    image = sersic_model(xx, yy)

    # convolve with a PSF
    if do_psf:
        kernel = Gaussian2DKernel(3)
        kernel.normalize()
        psf = kernel.array
        image = convolve(image, psf)

    # background noise; snr is the S/N per pixel at the effective radius
    if add_noise:
        rng = np.random.default_rng(seed=seed)

        sky_sigma = 1.0 / snr
        image += sky_sigma * rng.standard_normal(size=(ny, nx))

    return image


def sims():

    if False:#True:
        nx = 2048 # 512
        snr = 1e4

        sersicn = 4. #1.
        ba = 0.25
        pa = 139.
        reff = 27. # 27.

        image = build_model(reff=reff, sersicn=sersicn, ba=ba, pa=pa,
                            snr=snr, nx=nx, ny=nx, add_noise=False,
                            do_psf=False)

        props = EllipseProperties()
        fit = props.fit(image)
        print('r50', reff, fit.a)
        print('b/a', ba, fit.ba)
        print('PA', pa, fit.pa)

        fig, ax = plt.subplots()
        norm = simple_norm(np.log10(image))#, stretch='log')
        fit.plot(image=np.log10(image), ax=ax, show_centroid=True,
                 imshow_kwargs={
                     'norm': norm,
                     'origin': 'lower'})
        fig.savefig('ioannis/tmp/junk2.png')

        pdb.set_trace()


    snr = 1e4

    nx = 4096
    ba = 0.25
    pa = 139.

    reffs = np.linspace(5., 50., 20)
    maxis = np.zeros_like(reffs)
    bas = np.zeros_like(reffs)
    pas = np.zeros_like(reffs)

    props = EllipseProperties()

    fig, ax = plt.subplots()
    for sersicn in [1., 2.5, 4., 6.]:
        print(sersicn)
        #reffs = [127.]
        for imodel, reff in enumerate(reffs):
            image = build_model(reff=reff, sersicn=sersicn, ba=ba, pa=pa,
                                snr=snr, nx=nx, ny=nx, add_noise=False,
                                do_psf=False)
            fit = props.fit(image)
            print(imodel, fit.pa, fit.ba)
            maxis[imodel] = fit.a
            bas[imodel] = fit.ba
            pas[imodel] = fit.pa
            #mge = find_galaxy(image, quiet=True)
            #maxis[imodel] = mge.majoraxis

        #ax.scatter(reffs, maxis / reffs, s=20, label=f'n={sersicn:.0g}')
        #ax.scatter(reffs, pas/pa, s=20, label=f'n={sersicn:.0g}')
        ax.scatter(reffs, bas/ba, s=20, label=f'n={sersicn:.0g}')
        #ax.set_ylim(0.5, 1.5)

    ax.legend(loc='upper right')
    fig.savefig('ioannis/tmp/junk.png')

    pdb.set_trace()

if __name__ == '__main__':
    sims()
